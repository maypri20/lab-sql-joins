-- List the number of films per category.
select b.category_id, b.name, count(a.film_id) from sakila.film as a
join sakila.category b
on a.film_id = b.category_id
join sakila.film_category as c
on c.film_id = a.film_id
group by b.category_id;
-- Retrieve the store ID, city, and country for each store.
select s.store_id, c.city, cc.country from sakila.city as c
join sakila.country as cc
on c.country_id = cc.country_id
join sakila.address as a
on c.city_id = a.city_id
join sakila.store as s
on s.address_id = a.address_id;
-- Calculate the total revenue generated by each store in dollars.
select s.store_id, sum(p.amount) as revenue from sakila.store as s
join sakila.staff as t
on s.store_id = t.store_id
join sakila.payment as p
on p.staff_id = t.staff_id
group by store_id
order by revenue desc;
-- Determine the average running time of films for each category.
select b.category_id, avg(a.length) from sakila.film as a
join sakila.category b
on a.film_id = b.category_id
join sakila.film_category as c
on c.film_id = a.film_id
group by b.category_id;
-- Identify the film categories with the longest average running time.
select b.category_id, b.name, avg(a.length) as duration from sakila.film as a
join sakila.category b
on a.film_id = b.category_id
join sakila.film_category as c
on c.film_id = a.film_id
group by b.category_id
order by duration desc;
-- Display the top 10 most frequently rented movies in descending order.
SELECT f.film_id, f.title, COUNT(r.rental_id) AS rental_count
FROM sakila.rental r
JOIN sakila.inventory i ON r.inventory_id = i.inventory_id
JOIN sakila.film f ON i.film_id = f.film_id
GROUP BY f.film_id, f.title
ORDER BY rental_count DESC
LIMIT 10;
-- Determine if "Academy Dinosaur" can be rented from Store 1
select f.title, i.store_id from sakila.inventory as i
join sakila. film as f
on f.film_id = i.film_id
where title = 'Academy Dinosaur' and i.store_id = 1
group by f.title, i.store_id;
-- Provide a list of all distinct film titles, along with their availability status in the inventory. 
select f.title, 
CASE 
	WHEN IFNULL(i.film_id, 0) = 0 THEN 'NOT available'
	ELSE 'Available'
END AS availability_status
FROM sakila.film f
LEFT JOIN sakila.inventory i 
    ON f.film_id = i.film_id
GROUP BY f.film_id, f.title
ORDER BY availability_status, f.title;